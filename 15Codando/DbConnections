        $schemaName = $this->argument('name') ?: config("database.connections.mysql.database");
        $charset = config("database.connections.mysql.charset",'utf8mb4');
        $collation = config("database.connections.mysql.collation",'utf8mb4_unicode_ci');

        config(["database.connections.mysql.database" => null]);

        $query = "CREATE DATABASE IF NOT EXISTS $schemaName CHARACTER SET $charset COLLATE $collation;";

        DB::statement($query);

        config(["database.connections.mysql.database" => $schemaName]);

        $database = $this->argument('database')
            ?: config('database.connections.' . config('database.default') . '.database');

        if ($this->dbHandler()->databaseExists($database)) {
            $this->output->warning("Database `$database` exists");

            return 1;
        }

        $this->dbHandler()->createDatabase($database);

        $this->output->success("Database `$database` created successfully");



        $schemaName = $this->argument('name') ?: config("database.connections.mysql.database");
        config(["database.connections.mysql.database" => null]);
//        $dbs = DB::statement("SELECT `schema_name` from INFORMATION_SCHEMA.SCHEMATA where schema_name = '$schemaName'");

        $query = "DROP DATABASE IF EXISTS $schemaName;";

        $ret = DB::statement($query);
        config(["database.connections.mysql.database" => $schemaName]);

        $this->info(sprintf('Successfully removed %s database', $schemaName));


DropDb

        $database = $this->argument('database')
            ?: config('database.connections.' . config('database.default') . '.database');

        // Check if db exists
        if (!$this->dbHandler()->databaseExists($database)) {
            $this->output->warning("Database `$database` doesn`t exist");

            return 1;
        }

        // Confirm
        if (!$this->confirm("Do you really wish to drop `$database` database?")) {
            $this->output->note('Command aborted');

            return 255;
        }

        $this->dbHandler()->dropDatabase($database);

        $this->output->success("Database `$database` dropped successfully");


        // TODO
        // Implement arguments that user can pass to customize dump process (like gz) ...

        $database = $this->argument('database')
            ?: config('database.connections.' . config('database.default') . '.database');

        $dir = $this->option('dir')
            ?: config('filesystems.disks.' . config('filesystems.default') . '.root');

        if (!$this->dbHandler()->databaseExists($database)) {
            $this->output->warning("Database `$database` doesn`t exist");

            return 1;
        }

        $user = env('DB_USERNAME');
        $password = env('DB_PASSWORD');
        $host = env('DB_HOST');
        $destination = $dir . DIRECTORY_SEPARATOR . "$database-" . Carbon::now()->format('Y-m-d-H-i-s') . '.sql';

        // Omit view definer so we do not come across missing user on another system
        $removeDefiner = "| sed -e 's/DEFINER[ ]*=[ ]*[^*]*\*/\*/'";

        // Avoid database prefix being written into dump file
        $removeDbPrefix = "| sed -e 's/`$database`.`/`/g'";

        $command = "mysqldump -h $host -u$user -p$password $database $removeDefiner $removeDbPrefix > $destination";

        $this->consoleHandler()->executeCommand($command);

        $this->output->success("Database `$database` dumped successfully");
        $this->output->text("Destination: `$destination`");
        $this->output->newLine();

DbExist

        $database = $this->argument('database')
            ?: config('database.connections.' . config('database.default') . '.database');

        if ($this->dbHandler()->databaseExists($database)) {
            $this->output->note("Database `$database` exists");
        } else {
            $this->output->note("Database `$database` doesn`t exist");
        }


